<?php
// $Id$

/**
 * @file
 * clients_xmlrpc module file.
 *
 * This module provides simple client API for XMLRPC services.
 */

/**
 * Form builder: Builds the clients_xmlrpc administration overview.
 */
function clients_xmlrpc_admin() {
  $form = array();

  // URL
  $form['clients_xmlrpc_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Server address'),
    '#default_value' => variable_get('clients_xmlrpc_url', 'services/xmlrpc'),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t("The URL of XML-RPC service"),
    '#required' => TRUE,
  );

  // API key
  $form['clients_xmlrpc_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => variable_get('clients_xmlrpc_api_key', ''),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t("Leave empty if service does not require authorization"),
  );

  // domain name
  $form['clients_xmlrpc_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain Name'),
    '#default_value' => variable_get('clients_xmlrpc_domain', $_SERVER['HTTP_HOST']),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t("Domain name allowed to use above API key"),
  );

  return system_settings_form($form);
}

/**
 * Validate the clients_xmlrpc settings form.
 */
function clients_xmlrpc_admin_validate($form, &$form_state) {
  // The domain can't be empty when token specified.
  if (!empty($form_state['values']['clients_xmlrpc_api_key'])
    && empty($form_state['values']['clients_xmlrpc_domain'])) {
    form_set_error('clients_xmlrpc_domain', 'Domain name required for token based authorization');
  }
}

/**
 * Implementation of hook_menu().
 */
function clients_xmlrpc_menu() {
  $items = array();
  $items['admin/settings/clients_xmlrpc'] = array(
    'title' => 'Simple XML-RPC Client',
    'description' => 'Configure clients_xmlrpc module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clients_xmlrpc_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Clients XML-RPC API functions.
 */

/**
 * XML-RPC call wrapper.
 *
 * This method support anonymous session and token based
 * authorization if API Key specified in module settings.
 */
function clients_xmlrpc_call($method) {
  include_once './includes/xmlrpc.inc';
  $args = func_get_args();
  unset($args[0]);

  // retrieve xml-rpc url
  $xmlrpc_url = url(
    variable_get('clients_xmlrpc_url', 'services/xmlrpc'),
    array('absolute'=>TRUE)
  );

  // Get anon session. system.connect is the only service that does
  // not require a sessionid even when you have 'Use Sess ID' checked.
  $anon_session = xmlrpc($xmlrpc_url, 'system.connect');

  // authorization arguments
  $auth_args = array();
  if ($api_key = variable_get('clients_xmlrpc_api_key', '')) {
    $domain = variable_get('clients_xmlrpc_domain', $_SERVER['HTTP_HOST']);
    $timestamp = (string) time();
    $nonce = user_password();
    $hash = hash_hmac(
      'sha256',
      $timestamp .';'.$domain .';'. $nonce .';'.$method, $api_key
    );
    $auth_args = array($hash, $domain, $timestamp, $nonce);
  }

  // construct final arguments
  $args = array_merge(
    array($xmlrpc_url, $method),
    $auth_args,
    array($anon_session['sessid']),
    $args
  );

  // call xml-rpc method
  return call_user_func_array('_xmlrpc', $args);
}
